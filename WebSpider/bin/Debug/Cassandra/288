Using multiple network interfaces
Steps for configuring Cassandra for multiple network interfaces or when using different regions in cloud implementations.


How to configure Cassandra for multiple network interfaces or when using different regions in cloud implementations. 

You must configure settings in both the cassandra.yaml file and the property file (cassandra-rackdc.properties or cassandra-topology.properties) used by the snitch.


Configuring cassandra.yaml for multiple networks or across regions in cloud implementations 

In multiple networks or cross-region cloud scenarios, communication between data centers can only take place using an external IP address. The external IP address is defined in the cassandra.yaml file using the broadcast_address setting. Configure each node as follows:
In the cassandra.yaml, set the listen_address to the private IP address of the node, and the broadcast_address to the public address of the node. 
This allows Cassandra nodes to bind to nodes in another network or region, thus enabling multiple data-center support. For intra- network or region traffic, Cassandra switches to the private IP after establishing a connection.

Set the addresses of the seed nodes in the cassandra.yaml file to that of the public IP. Private IP are not routable between networks. For example:seeds: 50.34.16.33, 60.247.70.52

Note: Do not make all nodes seeds, see Internode communications (gossip).

Be sure that the storage_port or ssl_storage_port is open on the public IP firewall.

CAUTION:

Be sure to enable encryption and authentication when using public IP's. See Node-to-node encryption. Another option is to use a custom VPN to have local, inter-region/datacenter IP's.


Configuring the snitch for multiple networks 

External communication between the data centers can only happen when using the broadcast_address (public IP).

The GossipingPropertyFileSnitch is recommended for production. The cassandra-rackdc.properties file defines the data centers used by this snitch.

For each node in the network, specify its data center in cassandra-rackdc.properties file.

In the example below, there are two cassandra data centers and each data center is named for its workload. The data center naming convention in this example is based on the workload. You can use other conventions, such as DC1, DC2 or 100, 200. (Data center names are case-sensitive.) 



Network A

Network B


Node and data center:node0 
dc=DC_A_cassandra
 rack=RAC1

node1
dc=DC_A_cassandra
 rack=RAC1

node2
dc=DC_B_cassandra
 rack=RAC1

node3 
dc=DC_B_cassandra
 rack=RAC1

node4 
dc=DC_A_analytics
 rack=RAC1

node5 
dc=DC_A_search
 rack=RAC1

Node and data center:node0 
dc=DC_A_cassandra
 rack=RAC1

node1
dc=DC_A_cassandra
 rack=RAC1

node2
dc=DC_B_cassandra
 rack=RAC1

node3 
dc=DC_B_cassandra
 rack=RAC1

node4 
dc=DC_A_analytics
 rack=RAC1

node5 
dc=DC_A_search
 rack=RAC1




Configuring the snitch for cross-region communication in cloud implementations 

Note: Be sure to use the appropriate snitch for your implementation. If your deploying on Amazon EC2, see the instructions in Ec2MultiRegionSnitch.

In cloud deployments, the The region name is treated as the data center name and availability zones are treated as racks within a data center. For example, if a node is in the us-east-1 region, us-east is the data center name and 1 is the rack location. (Racks are important for distributing replicas, but not for data center naming.) 

In the example below, there are two cassandra data centers and each data center is named for its workload. The data center naming convention in this example is based on the workload. You can use other conventions, such as DC1, DC2 or 100, 200. (Data center names are case-sensitive.) 

For each node, specify its data center in the cassandra-rackdc.properties. The dc_suffix option defines the data centers used by the snitch. Any other lines are ignored.  



Region: us-east

Region: us-west


Node and data center:node0 
dc_suffix=_1_cassandra

node1
dc_suffix=_1_cassandra

node2
dc_suffix=_2_cassandra

node3 
dc_suffix=_2_cassandra

node4 
dc_suffix=_1_analytics

node5 
dc_suffix=_1_search


This results in four us-east data centers:us-east_1_cassandra
us-east_2_cassandra
us-east_1_analytics
us-east_1_search
Node and data center:node0
dc_suffix=_1_cassandra

node1
dc_suffix=_1_cassandra

node2
dc_suffix=_2_cassandra

node3 
dc_suffix=_2_cassandra

node4
dc_suffix=_1_analytics

node5 
dc_suffix=_1_search


This results in four us-west data centers:us-west_1_cassandra
us-west_2_cassandra
us-west_1_analytics
us-west_1_search

